#!/bin/bash
# ┌────────────────────────────────────────────────────────────┐
# │ Type / Version : bash / 1.0.0.0-live                       │
# │ Author : Mark Hamilton │ Co-Pilot AI assisted              │
# │ Script Purpose : Start Neo4j service & Bloodhound Launcher │
# │ Package : toolbox                                          │
# └────────────────────────────────────────────────────────────┘
# 
# Usage:
#   tool-bhl [--dry-run] [--diagnose-only] [--no-browser] [--verbose]
# 
# Examples:
#   tool-bhl --dry-run
#   tool-bhl --diagnose-only
#   tool-bhl --no-browser
#   tool-bhl --verbose
# 
# Description:
#   Launches Neo4j and BloodHound with optional diagnostics and browser integration.
#   Supports dry-run mode for audit-grade simulation and diagnose-only mode for service health checks.
#   Automatically detects Chromium-compatible browsers and launches BloodHound if available.
# End Help

LOGDIR="$(getent passwd $SUDO_USER | cut -d: -f6)/logs"
LOGFILE="$LOGDIR/bloodhound-launch.log"
BLOODHOUND_CMD="bloodhound"
CHROMIUM_CMD=""
NEO4J_PORT=7474
DRYRUN=false
DIAGNOSE_ONLY=false
NO_BROWSER=false
VERBOSE=false
SCRIPT_PATH="$(realpath "$0")"
SCRIPT_HASH="$(sha256sum "$SCRIPT_PATH" | awk '{print $1}')"

# Parse arguments
for arg in "$@"; do
    case $arg in
        --dry-run) DRYRUN=true ;;
        --diagnose-only) DIAGNOSE_ONLY=true ;;
        --no-browser) NO_BROWSER=true ;;
        --verbose) VERBOSE=true ;;
    esac
done

# Ensure script is run with root privileges
if [[ $EUID -ne 0 ]]; then
    echo "This tool must be run as root. Try: sudo tool-bhl"
    exit 1
fi

mkdir -p "$LOGDIR"
: > "$LOGFILE"

log() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') $1" | tee -a "$LOGFILE"
}

run_or_simulate() {
    if $DRYRUN; then
        log "[DRY-RUN] $1"
    else
        eval "$1"
    fi
}

detect_browser() {
    if command -v chromium &> /dev/null; then
        CHROMIUM_CMD="chromium"
    elif command -v chromium-browser &> /dev/null; then
        CHROMIUM_CMD="chromium-browser"
    else
        CHROMIUM_CMD=""
        log "No Chromium-compatible browser found."
    fi
}

start_neo4j() {
    log "Starting Neo4j directly as root..."
    local NEO4J_BIN="/usr/bin/neo4j"
    if [ ! -x "$NEO4J_BIN" ]; then
        log "Neo4j binary not found at $NEO4J_BIN. Aborting."
        return 1
    fi
    run_or_simulate "nohup $NEO4J_BIN console > /dev/null 2>&1 &"
    sleep 2
}

wait_for_neo4j() {
    local max_attempts=15
    local attempt=1
    while (( attempt <= max_attempts )); do
        HTTP_CODE=$(curl -s -o /dev/null -w "%{http_code}" "http://localhost:$NEO4J_PORT")
        if $VERBOSE; then log "Neo4j responded with HTTP code: $HTTP_CODE"; fi
        if [[ "$HTTP_CODE" =~ ^(200|302|401)$ ]]; then
            log "Neo4j is responsive after $attempt attempt(s)."
            return 0
        fi
        log "Waiting for Neo4j... ($attempt/$max_attempts)"
        sleep 3
        (( attempt++ ))
    done
    log "Neo4j failed to respond after $max_attempts attempts."
    return 1
}

launch_browser() {
    if $NO_BROWSER; then
        log "Browser launch skipped due to --no-browser flag."
        return 0
    fi

    if [ -z "$SUDO_USER" ]; then
        log "Cannot launch browser: SUDO_USER is unset."
        return 1
    fi

    if [ -n "$CHROMIUM_CMD" ]; then
        log "Launching Chromium browser as $SUDO_USER..."
        run_or_simulate "sudo -u $SUDO_USER $CHROMIUM_CMD \"http://localhost:$NEO4J_PORT\" &"
    else
        log "Skipping browser launch: no compatible browser found."
    fi
}

start_bloodhound() {
    log "Starting BloodHound..."
    if command -v $BLOODHOUND_CMD &> /dev/null; then
        run_or_simulate "$BLOODHOUND_CMD &"
        sleep 5
        log "BloodHound launched."
    else
        log "BloodHound command not found. Please install BloodHound or check PATH."
        return 1
    fi
}

check_port_conflict() {
    local PORT=$1
    echo -e "\n[4] Checking for port conflicts on port $PORT..."
    local CONFLICT=$(lsof -i :$PORT | grep LISTEN)
    if [ -n "$CONFLICT" ]; then
        echo "$CONFLICT"
        local PID=$(echo "$CONFLICT" | awk '{print $2}')
        echo -e "\n[4a] Inspecting process using port $PORT (PID: $PID)..."
        ps -fp "$PID"
        echo -e "\n[4b] Attempting to terminate process using port $PORT..."
        if kill "$PID"; then
            echo "Process $PID terminated successfully."
        else
            echo "Failed to terminate process $PID. You may need to investigate manually."
        fi
        sleep 2
        echo -e "\n[4c] Rechecking port $PORT..."
        lsof -i :$PORT || echo "Port $PORT is now clear."
    else
        echo "No process currently using port $PORT."
    fi
}

diagnose_neo4j() {
    echo "=== Neo4j Diagnostic Sequence Initiated ==="
    echo "Timestamp: $(date)"
    echo "Script SHA256: $SCRIPT_HASH"
    echo -e "\n[1] Checking Neo4j process..."
    pgrep -af neo4j || echo "Neo4j process not found."
    echo -e "\n[2] Verifying Neo4j version..."
    neo4j --version || echo "Neo4j binary not found."
    check_port_conflict $NEO4J_PORT
    echo -e "\n[3] Displaying config file path and key settings..."
    CONF_PATH="/etc/neo4j/neo4j.conf"
    if [ -f "$CONF_PATH" ]; then
        grep -E 'dbms.default_listen_address|dbms.connector.http.listen_address' "$CONF_PATH"
    else
        echo "Config file not found at $CONF_PATH"
    fi
    echo -e "\n=== Diagnostic Complete ==="
}

main() {
    log "=== BloodHound Launch Sequence Initiated ==="
    log "Script path: $SCRIPT_PATH"
    log "Script SHA256: $SCRIPT_HASH"
    if $DRYRUN; then log "Dry-run mode enabled. No changes will be made."; fi
    detect_browser
    if $DIAGNOSE_ONLY; then
        log "Diagnose-only mode enabled. Skipping launch sequence."
        diagnose_neo4j
        exit 0
    fi
    start_neo4j
    if wait_for_neo4j; then
        launch_browser
        start_bloodhound
        echo ""
        echo "If the browser does not Start automatically, then either :-"
        echo "   1. start manually via linux desktop."
        echo "   2. start manually in Windows if using WSL."
    else
        diagnose_neo4j
        log "Neo4j failed to start. Aborting BloodHound launch."
        exit 1
    fi
    log "=== Launch Sequence Complete ==="
}

main
