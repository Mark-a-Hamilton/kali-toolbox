#!/bin/bash

# ‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê
# ‚îÇ File / Version : tool-docgen / live                        ‚îÇ
# ‚îÇ Author : Mark Hamilton ‚îÇ Co-Pilot AI assisted              ‚îÇ
# ‚îÇ Script Purpose : Generate MD docs from Scripts             ‚îÇ
# ‚îÇ Package : toolbox                                          ‚îÇ
# ‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò
# Usage:
#   tool-docgen.sh tool-example > docs/tool-example.md
# Examples: to be completed
#   tool-docgen --dry-run        outputs what will be done - no changes made.
# Description:
#   After creating a new tool with tool-template scripts, naming it to tool-<newtoolname> then this
#   script generates the markdown documentation for the stated tool (tool-example) to the destination
#   (docs/tool-example.md).
# End Help

script="$1"
toolname=$(basename "$script")
output="~/Documents/$toolname.md"

# Extract help block and parse key fields
help_block=$(grep -E '^#' "$script" | sed 's/^# //' | tr -d '\r')
brief_purpose=$(echo "$help_block" | grep 'Script Purpose' | cut -d':' -f2- | xargs)
author=$(echo "$help_block" | grep 'Author' | cut -d':' -f2- | xargs)
version=$(echo "$help_block" | grep 'File / Version' | cut -d':' -f2- | xargs)

# Extract flags and infer basic descriptions
flags=$(grep -Eo '--[a-zA-Z0-9\-]+' "$script" | sort -u)

# Heuristic flag descriptions (fallback)
describe_flag() {
  case "$1" in
    --dry-run) echo "Simulates execution without making changes." ;;
    --log) echo "Enables logging of actions to a timestamped file." ;;
    --hashmap) echo "Generates hash-based audit trace for traceability." ;;
    *) echo "Custom flag. Description may vary." ;;
  esac
}

# Start Markdown output
cat <<EOF
# üõ†Ô∏è $toolname

$toolname is a modular utility for Kali Linux. It performs $brief_purpose with optional dry-run, logging, and hash-based audit support, ensuring safe and traceable execution.

---

## üì¶ Purpose

$brief_purpose

---

## üë§ Author & Version

- Author: $author
- Version: $version

---

## üöÄ Usage

### Basic Execution
\`\`\`bash
$toolname
\`\`\`

### Dry-Run Mode
\`\`\`bash
$toolname --dry-run
\`\`\`

### With Logging
\`\`\`bash
$toolname --log
\`\`\`

### With Hash-Based Audit
\`\`\`bash
$toolname --hashmap
\`\`\`

---

## ‚öôÔ∏è Parameters

| Flag | Description |
|------|-------------|
EOF

for flag in $flags; do
  echo "| \`$flag\` | $(describe_flag "$flag") |"
done

cat <<EOF

---

## üîß Steps Performed

| Command | Description |
|---------|-------------|
| <command> | <description> |

---

## üìÅ Output

- Console summary of actions
- Optional log file with timestamped entries
- Optional \`.hashmap/\` entry for audit traceability

---

## ü§ñ AI & Ethics Disclosure

This tool was co-authored with AI assistance. For full details on ethical integration, traceability, and responsible authorship, see [ethics_AI.md](https://mark-a-hamilton.github.io/main/ethics_AI.md).

üîô [Return to Kali-toolbox](https://github.com/Mark-a-Hamilton/Mark-a-Hamilton.github.io/kali-toolbox)

---
EOF
